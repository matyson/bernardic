/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WordsIndexImport } from './routes/words/index'
import { Route as WordsWordImport } from './routes/words/$word'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const WordsIndexRoute = WordsIndexImport.update({
  path: '/words/',
  getParentRoute: () => rootRoute,
} as any)

const WordsWordRoute = WordsWordImport.update({
  path: '/words/$word',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/words/$word': {
      id: '/words/$word'
      path: '/words/$word'
      fullPath: '/words/$word'
      preLoaderRoute: typeof WordsWordImport
      parentRoute: typeof rootRoute
    }
    '/words/': {
      id: '/words/'
      path: '/words'
      fullPath: '/words'
      preLoaderRoute: typeof WordsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/words/$word': typeof WordsWordRoute
  '/words': typeof WordsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/words/$word': typeof WordsWordRoute
  '/words': typeof WordsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/words/$word': typeof WordsWordRoute
  '/words/': typeof WordsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/words/$word' | '/words'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/words/$word' | '/words'
  id: '__root__' | '/' | '/about' | '/words/$word' | '/words/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  WordsWordRoute: typeof WordsWordRoute
  WordsIndexRoute: typeof WordsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  WordsWordRoute: WordsWordRoute,
  WordsIndexRoute: WordsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/words/$word",
        "/words/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/words/$word": {
      "filePath": "words/$word.tsx"
    },
    "/words/": {
      "filePath": "words/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
